#!/bin/make
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#       NASA/GSFC, Data Assimilation Office, Code 910.3, GEOS/DAS      !
#-----------------------------------------------------------------------
# CVS $Id$
# CVS $Name: MCT_1_0_12 $  
#-----------------------------------------------------------------------
#BOP
#
# !ROUTINE: Makefile.rules
#
# !DESCRIPTION:
#
#	A makefile segment for the PSAS development environment
#
# !INTERFACE:
#
#	make
#
# !BUGS:
#
# !SEE ALSO: Makefile.conf Makefile.IRIX Makefile.OSF1 Makefile.UNICOS
#
# !REVISION HISTORY:
# 	06May97 - J. Guo
#EOP
#_______________________________________________________________________

#-----------------------------------------------------------------------
# Default configuration with common names

# The Fortran 90 module file suffix
M		= mod

MAKE		= make
MAKEFILE	= Makefile

LN		= ln -s
RM		= rm -f
CP		= cp -p

ZIP		= compress
Z		= Z
ZCAT		= zcat
TAR		= tar
AR		= ar cq

default:
	@ echo "$(MAKE): all clean install, etc."

.SUFFIXES:
.SUFFIXES: .H .h .F90 .f90 .F .f .c .o

#-----------------------------------------------------------------------
# Recursive (conf), top-down

conf:	$(SUBD_TARGETS)
	@ argv="$(SUBD_TARGETS)"			;\
	  for d in $$argv; do			\
	    ( cd $$d;				\
	      echo "$@: making `pwd`/";		\
	      chmod +x configure;		\
	      ./configure;			\
	      $(MAKE) -f $(MAKEFILE) $@ )	\
	  done

unconf:	$(SUBD_TARGETS)
	@ argv="$(SUBD_TARGETS)"			;\
	  for d in $$argv; do			\
	    ( cd $$d;				\
	      echo "$@: making `pwd`/";		\
	      $(MAKE) -f $(MAKEFILE) $@;	\
	      chmod +x unconfigure;		\
	      ./unconfigure		)	\
	  done

#-----------------------------------------------------------------------
# Recursive (list), top-down

list:	$(ARCH_TARGETS) $(SUBD_TARGETS)
	@ argv="$(ARCH_TARGETS)" ;\
	  for f in $$argv; do \
	    echo $$f | sed -e "s:^\./::" ;\
	  done
	@ argv="$(SUBD_TARGETS)" ;\
	  for d in $$argv; do \
	    (cd $$d; $(MAKE) $@ ) | sed -e "s:^:$$d/:" ;\
	  done

#-----------------------------------------------------------------------
arch:
	@ if [ -z "$(MODULE)" ]; then \
		echo "$@: undefined, MODULE"; exit 2; fi
	@ echo "$@: marking the .origin of $(MODULE).tar.$(Z)"
	@ echo `hostname`:`pwd` >.origin
	@ echo "$@: making $(MODULE).tar.$(Z) ..."
	@ $(RM) $(MODULE).tar.$(Z)
	@ $(TAR) -cvf $(MODULE).tar .origin `$(MAKE) list`
	@ $(ZIP) -v $(MODULE).tar
	@ $(RM) .origin

unar:
	@ if [ -z "$(MODULE)" ]; then \
	    echo "$@: undefined, MODULE"; exit 2; fi
	@ if [ ! -r "$(MODULE).tar.$(Z)" ]; then \
	    echo "$@: can not open, $(MODULE).tar.$(Z)"; exit 2; fi
	@ echo "$@: checking the .origin of $(MODULE).tar.$(Z) ..."
	@ $(ZCAT) $(MODULE).tar.$(Z) | $(TAR) -xvf - .origin
	@ if [ -r .origin ]; then \
	    origin=`cat .origin` ;\
	    current=`hostname`:`pwd` ;\
	    echo "$@: .origin = $${origin}" ;\
	    $(RM) .origin ;\
	    if [ "$${origin}" = "$${current}" ]; then \
	      echo "$@: the origin of $(MODULE).tar.$(Z)" ;\
	      exit 2; fi ;\
	  else	\
	    echo "$@: not marked, $(MODULE).tar.$(Z)" ;\
	    exit 2 ;\
	  fi
	@ echo "$@: untaring $(MODULE).tar.$(Z) ..."
	@ $(ZCAT) $(MODULE).tar.$(Z) | $(TAR) -xvf -

#-----------------------------------------------------------------------
# Recursive (all), bottom-up

all: all_subd $(ALL_TARGETS)

#-----------------------------------------------------------------------
# Recursive (install), bottom-up after (all) has been done

install: install_subd $(INSTALL_TARGETS)

#-----------------------------------------------------------------------
# Bottom-up targets

all_subd install_subd CLEAN_MAKEFILE_subd: $(SUBD_TARGETS)
	@ t=`echo $@|sed -e 's/_subd//'`; argv="$(SUBD_TARGETS)" ;\
	  for d in $$argv; do			 \
	    ( cd $$d				;\
	      echo "$$t: making `pwd`/"		;\
	      $(MAKE) $$t )			 \
	  done

#-----------------------------------------------------------------------
# Recursive (utest), top-down after (all) has been done

utest:	$(UTEST_TARGETS) $(SUBD_TARGETS)
	@ argv="$(SUBD_TARGETS)"		;\
	  for d in $$argv; do			 \
	    ( cd $$d				;\
	      echo "$@: making `pwd`/"		;\
	      $(MAKE) $@)			 \
	  done

#-----------------------------------------------------------------------
# Recursive (clean), the order may be not relevant

clean:	$(CLEAN_TARGETS) $(SUBD_TARGETS)
	$(RM) *.a *.o *.$(M) *.x $(CLEAN_FILES)
	@ argv="$(SUBD_TARGETS)"		;\
	  for d in $$argv; do			 \
	    ( cd $$d				;\
	      echo "$@: making `pwd`/"		;\
	      $(MAKE) $@)			 \
	  done

#-----------------------------------------------------------------------
# Recursive (unstall), the order may be not relevant

unstall: $(UNSTALL_TARGETS) $(SUBD_TARGETS)
	@ argv="$(SUBD_TARGETS)"		;\
	  for d in $$argv; do			 \
	    ( cd $$d				;\
	      echo "$@: making `pwd`/"		;\
	      $(MAKE) $@)			 \
	  done

#=======================================================================
# Special targets that one should make() with care

#-----------------------------------------------------------------------
# Recursive (REALLY_CLEAN), the order may be not relevant

REALLY_CLEAN:	CLEAN_f90 CLEAN_f CLEAN_h CLEAN_arch
REALLY_CLEAN:	$(REALLY_CLEAN_TARGETS) $(SUBD_TARGETS)
	$(RM) *.o *.$(M) *.a *.x
	@ argv="$(SUBD_TARGETS)"		;\
	  for d in $$argv; do			 \
	    ( cd $$d				;\
	      echo "$@: making `pwd`/"		;\
	      $(MAKE) $@)			 \
	  done

CLEAN_f90:
	@ for F in *.F90; do \
	    f=`basename $$F .F90`.f90; \
	    if [ -r $$F ]; then $(RM) $$f; fi; done

CLEAN_f:
	@ for F in *.F; do \
	    f=`basename $$F .F`.f; \
	    if [ -r $$F ]; then $(RM) $$f; fi; done

CLEAN_h:
	@ for F in *.H; do \
	    f=`basename $$F .H`.h; \
	    if [ -r $$F ]; then $(RM) $$f; fi; done

CLEAN_arch:
	$(RM) $(MODULE).tar.$(Z)

CLEAN_MAKEFILE: CLEAN_MAKEFILE_subd
	@ for m in $(MAKERULE) $(MAKECONF); do	 \
	    d=`pwd`; d=`basename $$d`		;\
	    if [ -h $$m -a $$d != config ]; then \
	      echo "$(RM) $$m"			;\
	      $(RM) $$m				;\
	    fi					;\
	  done

#-----------------------------------------------------------------------
DO_IT_ANYWAY:
#.
