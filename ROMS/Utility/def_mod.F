#include "cppdefs.h"
#if defined FOUR_DVAR || defined VERIFICATION
      SUBROUTINE def_mod (ng)
!
!svn $Id$
!================================================== Hernan G. Arango ===
!  Copyright (c) 2002-2008 The ROMS/TOMS Group                         !
!    Licensed under a MIT/X style license                              !
!    See License_ROMS.txt                                              !
!=======================================================================
!                                                                      !
!  This routine create model/observation output NetCDF which contains  !
!  model fields  processed at observations points.                     !
!                                                                      !
!=======================================================================
!
      USE mod_param
      USE mod_parallel
      USE mod_fourdvar
      USE mod_iounits
      USE mod_ncparam
      USE mod_netcdf
      USE mod_scalars
      USE mod_strings
!
      USE def_var_mod, ONLY : def_var
# ifdef DISTRIBUTE
      USE distribute_mod, ONLY : mp_bcasti
# endif
!
      implicit none
!
!  Imported variable declarations.
!
      integer, intent(in) :: ng
!
!  Local variable declarations.
!
      logical, dimension(NV) :: got_var(NV)

      integer, parameter :: Natt = 24

      integer :: iterDim, datumDim, recordDim, stateDim
# ifdef IS4DVAR
      integer :: MinnerDim, NinnerDim, NouterDim, threeDim
# endif
      integer :: i, j, status, varid
      integer :: CostDim(2), Vsize(4), vardim(2)

      integer :: def_dim

      real(r8) :: Aval(6)

      character (len=80) :: Vinfo(Natt)
      character (len=80) :: ncname
!
!-----------------------------------------------------------------------
!  Set and report file name.
!-----------------------------------------------------------------------
!
      IF (exit_flag.ne.NoError) RETURN
      ncname=MODname(ng)
!
      IF (Master) THEN
        IF (LdefMOD(ng)) THEN
          WRITE (stdout,10) TRIM(ncname)
        ELSE
          WRITE (stdout,20) TRIM(ncname)
        END IF
      END IF
!
!  Initialize local information variable arrays.
!
      DO i=1,Natt
        DO j=1,LEN(Vinfo(1))
          Vinfo(i)(j:j)=' '
        END DO
      END DO
      DO i=1,6
        Aval(i)=0.0_r8
      END DO
!
!=======================================================================
!  Create a new model/observation file.
!=======================================================================
!
      DEFINE : IF (LdefMOD(ng)) THEN
        IF (OutThread) THEN
          status=nf90_create(TRIM(ncname), nf90_clobber, ncMODid(ng))
          IF (status.ne.nf90_noerr) THEN
            WRITE (stdout,30) TRIM(ncname)
            exit_flag=3
            ioerror=status
          END IF
        END IF
# ifdef DISTRIBUTE
        CALL mp_bcasti (ng, iNLM, exit_flag, 1)
# endif
        IF (exit_flag.ne.NoError) RETURN
# ifdef DISTRIBUTE
        CALL mp_bcasti (ng, iNLM, ncSTAid(ng), 1)
# endif
!
!-----------------------------------------------------------------------
!  Define dimensions.
!-----------------------------------------------------------------------
!
        status=def_dim(ng, iNLM, ncMODid(ng), ncname, 'record',         &
     &                 2, recordDim)
        IF (exit_flag.ne.NoError) RETURN

        status=def_dim(ng, iNLM, ncMODid(ng), ncname, 'state_var',      &
     &                 NstateVar(ng)+1, stateDim)
        IF (exit_flag.ne.NoError) RETURN

        status=def_dim(ng, iNLM, ncMODid(ng), ncname, 'datum',          &
     &                 Ndatum(ng), datumDim)
        IF (exit_flag.ne.NoError) RETURN

# ifdef FOUR_DVAR
#  ifdef IS4DVAR
        status=def_dim(ng, iNLM, ncMODid(ng), ncname, 'Ninner',         &
     &                 Ninner, NinnerDim)
        IF (exit_flag.ne.NoError) RETURN

        status=def_dim(ng, iNLM, ncMODid(ng), ncname, 'Minner',         &
     &                 Ninner+1, MinnerDim)
        IF (exit_flag.ne.NoError) RETURN

        status=def_dim(ng, iNLM, ncMODid(ng), ncname, 'Nouter',         &
     &                 Nouter, NouterDim)
        IF (exit_flag.ne.NoError) RETURN

#   ifdef LANCZOS
        status=def_dim(ng, iNLM, ncMODid(ng), ncname, 'three',          &
     &                 3, threeDim)
        IF (exit_flag.ne.NoError) RETURN
#   endif
#  endif

        status=def_dim(ng, iNLM, ncMODid(ng), ncname, 'iteration',      &
     &                 nf90_unlimited, iterDim)
        IF (exit_flag.ne.NoError) RETURN
!
        CostDim(1)=stateDim
        CostDim(2)=iterDim
# endif
!
!-----------------------------------------------------------------------
!  Define global attributes.
!-----------------------------------------------------------------------
!
        IF (OutThread) THEN
!
!  File type.
!
          IF (exit_flag.ne.NoError) THEN
            type='ROMS/TOMS 4DVAR output observation processing file'
            status=nf90_put_att(ncMODid(ng), nf90_global,               &
     &                          'type', TRIM(type))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'type', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF
!
!  Input observations file.
!
          IF (exit_flag.ne.NoError) THEN
            status=nf90_put_att(ncMODid(ng), nf90_global,               &
     &                          'obs_file', TRIM(OBSname(ng)))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'obs_file', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF
!
!  SVN repository information.
!
          IF (exit_flag.ne.NoError) THEN
            status=nf90_put_att(ncMODid(ng), nf90_global,               &
     &                          'svn_url', TRIM(svn_url))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'svn_url', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF

# ifdef SVN_REV
          IF (exit_flag.ne.NoError) THEN
            status=nf90_put_att(ncMODid(ng), nf90_global,               &
     &                          'svn_rev', TRIM(svn_rev))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'svn_rev', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF
# endif

# ifdef ROOT_DIR
          IF (exit_flag.ne.NoError) THEN
            status=nf90_put_att(ncMODid(ng), nf90_global,               &
     &                          'code_dir', TRIM(Rdir))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'code_dir', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF
# endif

# ifdef HEADER_DIR
          IF (exit_flag.ne.NoError) THEN
            status=nf90_put_att(ncMODid(ng), nf90_global,               &
     &                          'header_dir', TRIM(Hdir))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'header_dir', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF
# endif

# ifdef ROMS_HEADER
          IF (exit_flag.ne.NoError) THEN
            status=nf90_put_att(ncMODid(ng), nf90_global,               &
     &                          'header_file', TRIM(Hfile))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'header_file', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF
# endif
!
!  Attributes describing platform and compiler
!
          IF (exit_flag.ne.NoError) THEN
            status=nf90_put_att(ncMODid(ng), nf90_global,               &
     &                          'os', TRIM(my_os))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'os', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF

          IF (exit_flag.ne.NoError) THEN
            status=nf90_put_att(ncMODid(ng), nf90_global,               &
     &                          'cpu', TRIM(my_cpu))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'cpu', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF

          IF (exit_flag.ne.NoError) THEN
            status=nf90_put_att(ncMODid(ng), nf90_global,               &
     &                          'compiler_system', TRIM(my_fort))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'compiler_system', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF

          IF (exit_flag.ne.NoError) THEN
            status=nf90_put_att(ncMODid(ng),nf90_global,                &
     &                          'compiler_command', TRIM(my_fc))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'compiler_command', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF

          IF (exit_flag.ne.NoError) THEN
            status=nf90_put_att(ncMODid(ng), nf90_global,               &
     &                          'compiler_flags', TRIM(my_fflags))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'compiler_flags', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF
!
!  History attribute.
!
          IF (exit_flag.ne.NoError) THEN
            IF (LEN_TRIM(date_str).gt.0) THEN
              WRITE (history,'(a,1x,a,", ",a)') 'ROMS/TOMS, Version',   &
     &                                          TRIM(version),          &
     &                                          TRIM(date_str)
            ELSE
              WRITE (history,'(a,1x,a)') 'ROMS/TOMS, Version',          &
     &                                   TRIM(version)
            END IF
            status=nf90_put_att(ncMODid(ng), nf90_global,               &
     &                          'history', TRIM(history))
            IF (status.ne.nf90_noerr) THEN
              WRITE (stdout,40) 'history', TRIM(ncname)
              exit_flag=3
              ioerror=status
            END IF
          END IF
        END IF
# ifdef DISTRIBUTE
        CALL mp_bcasti (ng, iNLM, exit_flag, 1)
# endif
        IF (exit_flag.ne.NoError) RETURN
!
!-----------------------------------------------------------------------
!  Define variables and their attributes.
!-----------------------------------------------------------------------

# if defined IS4DVAR         || defined IS4DVAR_OLD || \
     defined WEAK_CONSTRAINT || defined IOM
!
!  Outer and inner loop contours.
!
        Vinfo( 1)='outer'
        Vinfo( 2)='outer loop counter'
        status=def_var(ng, iNLM, ncMODid(ng), varid, nf90_int,          &
     &                 1, (/0/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='inner'
        Vinfo( 2)='inner loop counter'
        status=def_var(ng, iNLM, ncMODid(ng), varid, nf90_int,          &
     &                 1, (/0/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
# endif
# ifndef OBS_SENSITIVITY
!
!  Define model-observation comparison statistics.
!
        Vinfo( 1)='Nobs'
        Vinfo( 2)='Number of usable observations'
        status=def_var(ng, iNLM, ncMODid(ng), varid, nf90_int,          &
     &                 1, (/stateDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='obs_mean'
        Vinfo( 2)='observations mean'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/stateDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='obs_std'
        Vinfo( 2)='observations standard deviation'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/stateDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='model_mean'
        Vinfo( 2)='model mean'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/stateDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='model_std'
        Vinfo( 2)='model standard deviation'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/stateDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='model_bias'
        Vinfo( 2)='model bias'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/stateDim/), Aval, Vinfo,ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='SDE'
        Vinfo( 2)='model-observations standard deviation error'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/stateDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='CC'
        Vinfo( 2)='model-observations cross-correlation'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/stateDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='MSE'
        Vinfo( 2)='model-observations mean squared error'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/stateDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
# endif
# if defined IS4DVAR
!
!  Converged Ritz eigenvalues.
!
        Vinfo( 1)='nConvRitz'
        Vinfo( 2)='Number of converged Ritz eigenvalues'
        status=def_var(ng, iNLM, ncMODid(ng), varid, nf90_int,          &
     &                 1, (/0/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='Ritz'
        Vinfo( 2)='converged Ritz eigenvalues to approximate Hessian'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/Ninnerdim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Define conjugate gradient norms.
!
#  ifndef LANCZOS
        Vinfo( 1)='cg_alpha'
        Vinfo( 2)='conjugate gradient alpha coefficient'
        vardim(1)=MinnerDim
        vardim(2)=NouterDim
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 2, vardim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
#  endif
        Vinfo( 1)='cg_beta'
        Vinfo( 2)='conjugate gradient beta coefficient'
        vardim(1)=MinnerDim
        vardim(2)=NouterDim
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 2, vardim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='cg_tau'
        Vinfo( 2)='conjugate gradient tau coefficient'
        vardim(1)=MinnerDim
        vardim(2)=NouterDim
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 2, vardim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

#  ifdef LANCZOS
!
!  Define Lanczos algorithm coefficients.
!
        Vinfo( 1)='cg_delta'
        Vinfo( 2)='Lanczos algorithm delta coefficient'
        vardim(1)=NinnerDim
        vardim(2)=NouterDim
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 2, vardim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='cg_gamma'
        Vinfo( 2)='Lanczos algorithm gamma coefficient'
        vardim(1)=NinnerDim
        vardim(2)=NouterDim
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 2, vardim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Initial gradient vector normalization factor.
!
        Vinfo( 1)='cg_Gnorm'
        Vinfo( 2)='initial gradient normalization factor'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/NouterDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Lanczos vector normalization factor.
!
        Vinfo( 1)='cg_QG'
        Vinfo( 2)='Lanczos vector normalization factor'
        vardim(1)=NinnerDim
        vardim(2)=NouterDim
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 2, vardim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Reduction in the gradient norm.
!
        Vinfo( 1)='cg_Greduc'
        Vinfo( 2)='reduction in the gradient norm'
        vardim(1)=NinnerDim
        vardim(2)=NouterDim
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 2, vardim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Lanczos recurrence tridiagonal matrix.
!
        Vinfo( 1)='cg_Tmatrix'
        Vinfo( 2)='Lanczos recurrence tridiagonal matrix'
        vardim(1)=NinnerDim
        vardim(2)=threeDim
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 2, vardim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Lanczos tridiagonal matrix, upper diagonal elements.
!
        Vinfo( 1)='cg_zu'
        Vinfo( 2)='tridiagonal matrix, upper diagonal elements'
        vardim(1)=NinnerDim
        vardim(2)=NouterDim
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 2, vardim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Eigenvalues of Lanczos recurrence relationship.
!
        Vinfo( 1)='cg_Ritz'
        Vinfo( 2)='Lanczos recurrence eigenvalues'
        vardim(1)=NinnerDim
        vardim(2)=NouterDim
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 2, vardim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Eigenvalues relative error.
!
        Vinfo( 1)='cg_RitzErr'
        Vinfo( 2)='Ritz eigenvalues relative error'
        vardim(1)=NinnerDim
        vardim(2)=NouterDim
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 2, vardim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Eigenvectors of Lanczos recurrence relationship.
!
        Vinfo( 1)='cg_zv'
        Vinfo( 2)='Lanczos recurrence eigenvectors'
        vardim(1)=NinnerDim
        vardim(2)=NinnerDim
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 2, vardim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
#  endif
# endif
# if defined WEAK_CONSTRAINT || defined IOM
!
!  Define conjugate gradient norms
!
        Vinfo( 1)='cg_gamma'
        Vinfo( 2)='conjugate gradient gamma norm'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/0/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='cg_sigma'
        Vinfo( 2)='conjugate gradient sigma norm'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/0/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)='cg_rnorm'
        Vinfo( 2)='conjugate gradient right-hand-side norm'
        status=def_var(ng, iNLM, ncMODid(ng), varid, NF_FRST,           &
     &                 1, (/0/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
# endif
!
!  Observations screening/normalization scale.
!
        Vinfo( 1)=Vname(1,idObsS)
        Vinfo( 2)=Vname(2,idObsS)
        Vinfo(24)='_FillValue'
        Aval(6)=0.0_r8
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idObsS,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

# if defined FOUR_DVAR && !defined OBS_SENSITIVITY
!
!  Initial nonlinear model at observation locations.
!
        Vinfo( 1)=Vname(1,idNLmi)
        Vinfo( 2)=Vname(2,idNLmi)
        Vinfo(24)='_FillValue'
        Aval(6)=1.0E+35_r8
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idNLmi,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
# endif
# ifndef OBS_SENSITIVITY
!
!  Nonlinear model at observation points.
!
        haveNLmod(ng)=.FALSE.
        Vinfo( 1)=Vname(1,idNLmo)
        Vinfo( 2)=Vname(2,idNLmo)
        Vinfo(24)='_FillValue'
        Aval(6)=1.0E+35_r8
#  ifdef S4DVAR
        vardim(1)=datumDim
        vardim(2)=recordDim
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idNLmo,ng),        &
     &                 NF_FRST, 2, vardim, Aval, Vinfo, ncname)
#  else
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idNLmo,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
#  endif
        IF (exit_flag.ne.NoError) RETURN
# endif
# if defined IS4DVAR         || defined IS4DVAR_OLD     || \
     defined IOM             || defined OBS_SENSITIVITY || \
     defined WEAK_CONSTRAINT 
!
!  Tangent linear or representer model at observation points.
!
        haveTLmod(ng)=.FALSE.
        Vinfo( 1)=Vname(1,idTLmo)
#  ifdef OBS_SENSITIVITY
        Vinfo( 2)='4DVAR sensitivity analysis at observations location'
#  else
        Vinfo( 2)=Vname(2,idTLmo)
#  endif
        Vinfo(24)='_FillValue'
        Aval(6)=1.0E+35_r8
#  ifdef IS4DVAR_OLD
        vardim(1)=datumDim
        vardim(2)=recordDim
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idTLmo,ng),        &
     &                 NF_FRST, 2, vardim, Aval, Vinfo, ncname)
#  else
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idTLmo,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
#  endif
        IF (exit_flag.ne.NoError) RETURN
# endif
# if defined IS4DVAR         || defined IS4DVAR_OLD || \
     defined WEAK_CONSTRAINT || defined IOM
!
!  Initial model-observation misfit (innovation) vector.
!
        Vinfo( 1)=Vname(1,idMOMi)
        Vinfo( 2)=Vname(2,idMOMi)
        Vinfo(24)='_FillValue'
        Aval(6)=0.0_r8
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idMOMi,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Final model-observation misfit (innovation) vector.
!
        Vinfo( 1)=Vname(1,idMOMf)
        Vinfo( 2)=Vname(2,idMOMf)
        Vinfo(24)='_FillValue'
        Aval(6)=0.0_r8
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idMOMf,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
# endif
# if defined WEAK_CONSTRAINT || defined IOM
!
!  Representer coeficients (or their approximation PSI) at observation
!  points.
!
        Vinfo( 1)=Vname(1,idRepC)
        Vinfo( 2)=Vname(2,idRepC)
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idRepC,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Conjugate gradient vectors.
!
        Vinfo( 1)=Vname(1,idCG_P)
        Vinfo( 2)=Vname(2,idCG_P)
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idCG_P,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)=Vname(1,idCG_R)
        Vinfo( 2)=Vname(2,idCG_R)
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idCG_R,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)=Vname(1,idCG_S)
        Vinfo( 2)=Vname(2,idCG_S)
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idCG_S,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)=Vname(1,idCG_V)
        Vinfo( 2)=Vname(2,idCG_V)
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idCG_V,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
       
        Vinfo( 1)=Vname(1,idCG_X)
        Vinfo( 2)=Vname(2,idCG_X)
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idCG_X,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN

        Vinfo( 1)=Vname(1,idCG_Z)
        Vinfo( 2)=Vname(2,idCG_Z)
        status=def_var(ng, iNLM, ncMODid(ng), modVid(idCG_Z,ng),        &
     &                 NF_FRST, 1, (/datumDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
# endif
# if defined IS4DVAR || defined IS4DVAR_OLD
!
!  Define cost function gradient norm.
!
        Vinfo( 1)='cost_gradient'
        Vinfo( 2)='cost function gradient norm'
        Vinfo(24)='_FillValue'
        Aval(6)=0.0_r8
        status=def_var(ng, iNLM, ncMODid(ng), varid, nf90_double,       &
     &                 2, CostDim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
# endif
# if defined IS4DVAR || defined IS4DVAR_OLD || defined S4DVAR
!
!  Define model minus observations misfit cost function.
!
        Vinfo( 1)='cost_function'
        Vinfo( 2)='model minus observation misfit cost function'
        Vinfo(24)='_FillValue'
        Aval(6)=0.0_r8
        status=def_var(ng, iNLM, ncMODid(ng), varid, nf90_double,       &
     &                 2, CostDim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
# endif
# ifdef BACKGROUND
!
!  Define model minus background misfit cost function.
!
        Vinfo( 1)='back_function'
        Vinfo( 2)='model minus background misfit cost function'
        Vinfo(24)='_FillValue'
        Aval(6)=0.0_r8
        status=def_var(ng, iNLM, ncMODid(ng), varid, nf90_double,       &
     &                 2, CostDim, Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
# endif
# if defined IS4DVAR || defined IS4DVAR_OLD
!
!  Define optimality property that measures the consistency between
!  background and observation errors hypotheses (Chi-square). 
!
        Vinfo( 1)='Jmin'
        Vinfo( 2)='normalized, optimal cost function minimum'
        status=def_var(ng, iNLM, ncMODid(ng), varid, nf90_double,       &
     &                 1, (/iterDim/), Aval, Vinfo, ncname)
        IF (exit_flag.ne.NoError) RETURN
# endif
!
!-----------------------------------------------------------------------
!  Leave definition mode.
!-----------------------------------------------------------------------
!
        IF (OutThread) THEN
          status=nf90_enddef(ncMODid(ng))
          IF (status.ne.nf90_noerr) THEN
            WRITE (stdout,50) TRIM(ncname)
            exit_flag=3
            ioerror=status
          END IF
        END IF
# ifdef DISTRIBUTE
        CALL mp_bcasti (ng, iNLM, exit_flag, 1)
# endif
        IF (exit_flag.ne.NoError) RETURN
      END IF DEFINE
!
!=======================================================================
!  Open an existing model/observation file and check its contents.
!=======================================================================
!
      QUERY : IF (.not.LdefMOD(ng)) THEN
        ncname=MODname(ng)
!
!  Inquire about the dimensions and check for consistency.
!
        CALL netcdf_check_dim (ng, iNLM, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Inquire about the variables.
!
        CALL netcdf_inq_var (ng, iNLM, ncname)
        IF (exit_flag.ne.NoError) RETURN
!
!  Open model/observation for read/write.
!
        IF (OutThread) THEN
          status=nf90_open(TRIM(ncname), nf90_write, ncMODid(ng))
          IF (status.ne.nf90_noerr) THEN
            WRITE (stdout,60) TRIM(ncname)
            exit_flag=3
            ioerror=status
          END IF
        END IF
# ifdef DISTRIBUTE
        CALL mp_bcasti (ng, iNLM, exit_flag, 1)
# endif
        IF (exit_flag.ne.NoError) RETURN
# ifdef DISTRIBUTE
        CALL mp_bcasti (ng, iNLM, ncMODid(ng), 1)
# endif
!
!  Initialize logical switches.
!
        DO i=1,NV
          got_var(i)=.FALSE.
        END DO
!
!  Scan variable list from model/observation NetCDF and activate
!  switches for required variables.
!
        DO i=1,n_var
          IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idObsS))) THEN
            got_var(idObsS)=.TRUE.
            modVid(idObsS,ng)=var_id(i)
# ifdef FOUR_DVAR
          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idNLmi))) THEN
            got_var(idNLmi)=.TRUE.
            modVid(idNLmi,ng)=var_id(i)
# endif
          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idNLmo))) THEN
            got_var(idNLmo)=.TRUE.
            haveNLmod(ng)=.TRUE.
            modVid(idNLmo,ng)=var_id(i)
# if defined IS4DVAR         || defined IS4DVAR_OLD || \
     defined WEAK_CONSTRAINT || defined IOM
          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idTLmo))) THEN
            got_var(idTLmo)=.TRUE.
            haveTLmod(ng)=.TRUE.
            modVid(idTLmo,ng)=var_id(i)
# endif
# if defined IS4DVAR         || defined IS4DVAR_OLD || \
     defined WEAK_CONSTRAINT || defined IOM
          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idMOMi))) THEN
            got_var(idMOMi)=.TRUE.
            modVid(idMOMi,ng)=var_id(i)
          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idMOMf))) THEN
            got_var(idMOMf)=.TRUE.
            modVid(idMOMf,ng)=var_id(i)
# endif
# if defined WEAK_CONSTRAINT || defined IOM
          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idRepC))) THEN
            got_var(idRepC)=.TRUE.
            haveADmod(ng)=.TRUE.
            modVid(idRepC,ng)=var_id(i)
          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idCG_P))) THEN
            got_var(idCG_P)=.TRUE.
            modVid(idCG_P,ng)=var_id(i)
          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idCG_R))) THEN
            got_var(idCG_R)=.TRUE.
            modVid(idCG_R,ng)=var_id(i)
          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idCG_S))) THEN
            got_var(idCG_S)=.TRUE.
            modVid(idCG_S,ng)=var_id(i)
          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idCG_V))) THEN
            got_var(idCG_V)=.TRUE.
            modVid(idCG_V,ng)=var_id(i)
          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idCG_X))) THEN
            got_var(idCG_X)=.TRUE.
            modVid(idCG_X,ng)=var_id(i)
          ELSE IF (TRIM(var_name(i)).eq.TRIM(Vname(1,idCG_Z))) THEN
            got_var(idCG_Z)=.TRUE.
            modVid(idCG_Z,ng)=var_id(i)
# endif
          END IF
        END DO
!
!  Check if needed variables are available.
!
        IF (.not.got_var(idObsS)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idObsS)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
# ifdef FOUR_DVAR
        IF (.not.got_var(idNLmi)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idNLmi)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
# endif
        IF (.not.got_var(idNLmo)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idNLmo)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
# if defined IS4DVAR         || defined IS4DVAR_OLD || \
     defined WEAK_CONSTRAINT || defined IOM
        IF (.not.got_var(idTLmo)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idTLmo)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
# endif
# if defined IS4DVAR         || defined IS4DVAR_OLD || \
     defined WEAK_CONSTRAINT || defined IOM
        IF (.not.got_var(idMOMi)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idMOMi)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
        IF (.not.got_var(idMOMf)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idMOMf)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
# endif
# if defined WEAK_CONSTRAINT || defined IOM
        IF (.not.got_var(idRepC)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idRepC)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
        IF (.not.got_var(idCG_P)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idCG_P)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
        IF (.not.got_var(idCG_R)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idCG_R)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
        IF (.not.got_var(idCG_S)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idCG_S)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
        IF (.not.got_var(idCG_V)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idCG_V)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
        IF (.not.got_var(idCG_X)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idCG_X)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
        IF (.not.got_var(idCG_Z)) THEN
          IF (Master) WRITE (stdout,70) TRIM(Vname(1,idCG_Z)),          &
     &                                  TRIM(MODname(ng))
          exit_flag=2
          RETURN
        END IF
# endif
      END IF QUERY

  10  FORMAT (/,6x,'DEF_MOD   - creating model/observation data file:', &
     &        1x,a)
  20  FORMAT (/,6x,'DEF_MOD   - inquiring model/observation data file:',&
     &        1x,a)
  30  FORMAT (/,' DEF_MOD - unable to create model/observation file:',  &
     &        1x,a)
  40  FORMAT (/,' DEF_MOD - unable to create globat attribute: ',       &
     &        a,/,11x,a)
  50  FORMAT (/,' DEF_MOD - unable to leave definition mode for',       &
     &        ' file: ', a)
  60  FORMAT (/,' DEF_MOD - unable to open observation/model file: ',a)

  70  FORMAT (/,' DEF_MOD - unable to find model/observation variable:',&
     &        1x,a,/,11x,'in file: ',a)

      RETURN
      END SUBROUTINE def_mod
#else
      SUBROUTINE def_mod
      RETURN
      END SUBROUTINE def_mod
#endif
