!  4DVar assimilation input parameters.
!
!svn $Id$
!========================================================= Hernan G. Arango ===
!  Copyright (c) 2002-2009 The ROMS/TOMS Group                                !
!    Licensed under a MIT/X style license                                     !
!    See License_ROMS.txt                                                     !
!==============================================================================
!                                                                             !
! Input parameters can be entered in ANY order, provided that the parameter   !
! KEYWORD (usually, upper case) is typed correctly followed by "="  or "=="   !
! symbols. Any comment lines are allowed and must begin with an exclamation   !
! mark (!) in column one.  Comments may  appear to the right of a parameter   !
! specification to improve documentation.  Comments will be ignored  during   !
! reading.  Blank lines are also allowed and ignored. Continuation lines in   !
! a parameter specification are allowed and must be preceded by a backslash   !
! (\).  In some instances, more than one value is required for a parameter.   !
! If fewer values are provided, the  last value  is assigned for the entire   !
! parameter array.  The multiplication symbol (*),  without blank spaces in   !
! between, is allowed for a parameter specification.  For example, in a two   !
! grids nested application:                                                   !
!                                                                             !
!    AKT_BAK == 2*1.0d-6  2*5.0d-6              ! m2/s                        !
!                                                                             !
! indicates that the first two entries of array AKT_BAK,  in fortran column-  !
! major order, will have the same value of "1.0d-6" for grid 1,  whereas the  !
! next two entries will have the same value of "5.0d-6" for grid 2.           !
!                                                                             !
! In multiple levels of nesting and/or multiple connected domains  step-ups,  !
! "Ngrids" entries are expected for some of these parameters.  In such case,  !
! the order of the entries for a parameter is extremely important.  It  must  !
! follow the same order (1:Ngrids) as in the state variable declaration. The  !
! USER may follow the above guidelines for specifying his/her values.  These  !
! parameters are marked by "==" plural symbol after the KEYWORD.              !
!                                                                             !
!==============================================================================
!

! Upper bound on the relative error of the gradient for the Lanczos
! conjugate gradient algorithm.

        GradErr = 1.0d-4

! Maximum error bound on Hessian eigenvectors in the Lanczos conjugate
! gradient algorithm.  Note that even quite inaccurate eigenvectors are
! useful for pre-conditioning purposes.

       HevecErr = 1.0d-1

! Switch (T/F) to compute approximated Hessian eigenpairs in the Lanzos
! conjugate gradient algorithm.

     LhessianEV = T

! Switch (T/F) to activate hot start in weak-constraint (W4DVAR and
! W4DPSAS) algorithms of subsequent outer loops.

      LhotStart = T

! Switch (T/F) to activate IS4DVAR conjugate gradient preconditioning.
! Two types of Limited-Memory Preconditioner (LMP) are available
! (Tshimanga et al., 2008): spectral LMP and Ritz LMP.
 
       Lprecond = T

! Switch to activate either Ritz Limited-Memory Preconditioner (T)
! or spectral Limited-Memory Preconditioner (F) to the IS4DVAR algorithm.

          Lritz = T

! If preconditioning, specify number of eigenpairs to use. If zero,
! use HevecErr parameter to determine the number of converged eigenpairs.

        NritzEV = 0

! If weak constraint 4DVar, set diffusive relaxation coefficients (m2/s)
! used to relax representer tangent linear solution to privious Picard
! iteration linearized trajectory.

      tl_M2diff ==   0.0d0                ! 2D momentum
      tl_M3diff == 100.0d0                ! 3D momentum

       tl_Tdiff ==  50.0d0  50.0d0        ! NT tracers

! Switches (T/F) to create and write error covariance normalization
! factors for model, initial conditions, boundary conditions, and
! surface forcing. If TRUE, these factors are computed and written
! to NRMname(1:4) NetCDF files. If FALSE, they are read from NRMname(1:4)
! NetCDF file. The computation of these factors is very expensive and
! need to be computed only once for a particular application provided
! that grid land/sea masking, and decorrelation scales remains
! the same. Notice that four values are needed (1=initial conditions,
! 2=model, 3=boundary conditions, 4=surface forcing) per each nested
! grid, [4,1:Ngrids].

        LdefNRM == F F F F                ! Create a new normalization files
        LwrtNRM == F F F F                ! Compute and write normalization

! Switches to compute the correlation normalization coefficients for
! model error covariance.

 CnormM(isFsur) =  T                      ! 2D variable at RHO-points
 CnormM(isUbar) =  T                      ! 2D variable at U-points
 CnormM(isVbar) =  T                      ! 2D variable at V-points
 CnormM(isUvel) =  T                      ! 3D variable at U-points
 CnormM(isVvel) =  T                      ! 3D variable at V-points
 CnormM(isTvar) =  T T                    ! NT tracers

! Switches to compute the correlation normalization coefficients for
! initial conditions error covariance.

 CnormI(isFsur) =  T                      ! 2D variable at RHO-points
 CnormI(isUbar) =  T                      ! 2D variable at U-points
 CnormI(isVbar) =  T                      ! 2D variable at V-points
 CnormI(isUvel) =  T                      ! 3D variable at U-points
 CnormI(isVvel) =  T                      ! 3D variable at V-points
 CnormI(isTvar) =  T T                    ! NT tracers

! Switches to compute the correlation normalization coefficients for
! boundary conditions error covariance.

 CnormB(isFsur) =  T                      ! 2D variable at RHO-points
 CnormB(isUbar) =  T                      ! 2D variable at U-points
 CnormB(isVbar) =  T                      ! 2D variable at V-points
 CnormB(isUvel) =  T                      ! 3D variable at U-points
 CnormB(isVvel) =  T                      ! 3D variable at V-points
 CnormB(isTvar) =  T T                    ! NT tracers

! Switches to compute the correlation normalization coefficients for
! initial conditions error covariance.

 CnormF(isUstr) =  T                      ! surface U-momentum stress
 CnormF(isVstr) =  T                      ! surface V-momentum stress
 CnormF(isTsur) =  T T                    ! NT surface tracers flux

! Correlation normalization method:
!
!      [0] Exact, very expensive
!      [1] Approximated, randomization

        Nmethod == 0

! If randomization, select random number generation scheme:
!
!      [1] Gaussian distributed deviates, numerical recipes

        Rscheme == 1

! Number of iterations to compute correlation normalization coefficients
! via the randomization approach. A large number is required to be
! statistically meaningful and achieve zero expectation mean and unit
! variance. These factors insure that the error covariance diagonal
! elements are equal to unity.

        Nrandom =  5000

! Horizontal and vertical stability and accuracy factors (< 1) used to
! time-step discretized convolution operators below its theoretical limit.

         Hgamma =  0.5                             ! horizontal operator
         Vgamma =  0.05                            ! vertical operator
 
! Model error covariance: horizontal, isotropic decorrelation scales (m).
! This scales are only used in weak-constraint data assimilation.

HdecayM(isFsur) ==  50.0d+3                               ! free-surface
HdecayM(isUbar) ==  50.0d+3                               ! 2D U-momentum
HdecayM(isVbar) ==  50.0d+3                               ! 2D V-momentum
HdecayM(isUvel) ==  50.0d+3                               ! 3D U-momentum
HdecayM(isVvel) ==  50.0d+3                               ! 3D V-momentum
HdecayM(isTvar) ==  50.0d+3   50.0d+3                     ! 1:NT tracers

! Model error covariance: vertical, isotropic decorrelation scales (m).

VdecayM(isUvel) == 100.0d0                                ! 3D U-momentum
VdecayM(isVvel) == 100.0d0                                ! 3D V-momentum
VdecayM(isTvar) == 100.0d0   100.0d0                      ! 1:NT tracers

! Initial conditions error covariance: horizontal, isotropic decorrelation
! scales (m).

HdecayI(isFsur) == 100.0d+3                               ! free-surface
HdecayI(isUbar) == 100.0d+3                               ! 2D U-momentum
HdecayI(isVbar) == 100.0d+3                               ! 2D V-momentum
HdecayI(isUvel) == 100.0d+3                               ! 3D U-momentum
HdecayI(isVvel) == 100.0d+3                               ! 3D V-momentum
HdecayI(isTvar) == 100.0d+3  100.0d+3                     ! 1:NT tracers

! Initial conditions error covariance: vertical, isotropic decorrelation
! scales (m).

VdecayI(isUvel) == 100.0d0                                ! 3D U-momentum
VdecayI(isVvel) == 100.0d0                                ! 3D V-momentum
VdecayI(isTvar) == 100.0d0   100.0d0                      ! 1:NT tracers

! Boundary conditions error covariance: horizontal, isotropic decorrelation
! scales (m). A value is expected for each boundary edge in the following
! order:             
!                  1: west  2: south  3: east  4: north

HdecayB(isFsur) == 100.0d+3 100.0d+3 100.0d+3 100.0d+3    ! free-surface
HdecayB(isUbar) == 100.0d+3 100.0d+3 100.0d+3 100.0d+3    ! 2D U-momentum
HdecayB(isVbar) == 100.0d+3 100.0d+3 100.0d+3 100.0d+3    ! 2D V-momentum
HdecayB(isUvel) == 100.0d+3 100.0d+3 100.0d+3 100.0d+3    ! 3D U-momentum
HdecayB(isVvel) == 100.0d+3 100.0d+3 100.0d+3 100.0d+3    ! 3D V-momentum
HdecayB(isTvar) == 4*100.0d+3  4*100.0d+3                 ! 1:NT tracers

! Boundary conditions error covariance: vertical, isotropic decorrelation
! scales (m). A value is expected for each boundary edge in the following
! order:             
!                 1: west  2: south  3: east  4: north

VdecayB(isUvel) == 100.0d0  100.0d0  100.0d0  100.0d0     ! 3D U-momentum
VdecayB(isVvel) == 100.0d0  100.0d0  100.0d0  100.0d0     ! 3D V-momentum
VdecayB(isTvar) == 4*100.d0  4*100.d0                     ! 1:NT tracers

! Surface forcing error covariance: horizontal, isotropic decorrelation
! scales (m).

HdecayF(isUstr) == 100.0d+3                       ! surface U-momentum stress
HdecayF(isVstr) == 100.0d+3                       ! surface V-momentum stress
HdecayF(isTsur) == 100.0d+3  100.0d+3             ! 1:NT surface tracers flux

! Input model, initial conditions, boundary conditions, and surface forcing
! standard deviation file names, [1:Ngrids].

       STDnameM == ocean_std_m.nc
       STDnameI == ocean_std_i.nc
       STDnameB == ocean_std_b.nc
       STDnameF == ocean_std_f.nc  

! Input/output model, initial conditions, boundary conditions, and surface
! forcing error covariance normalization factors file name, [1:Ngrids].

       NRMnameM == ocean_nrm_m.nc
       NRMnameI == ocean_nrm_i.nc
       NRMnameB == ocean_nrm_b.nc
       NRMnameF == ocean_nrm_f.nc

! Input/output observation file name, [1:Ngrids].

        OBSname == ocean_obs.nc

! Input/output Hessian eigenvectors file name, [1:Ngrids].

        HSSname == ocean_hss.nc

! Input/output Lanczos vectors file name, [1:Ngrids].

        LCZname == ocean_lcz.nc

! Output model data at observation locations file name, [1:Ngrids].

        MODname == ocean_mod.nc

!
!  GLOSSARY:
!  =========
!
!------------------------------------------------------------------------------
! Lanczos conjugate gradient algorithm parameters.
!------------------------------------------------------------------------------
!
!  GradErr        Upper bound on the relative error of the gradient.
!
!  HevecErr       Maximum error bound on Hessian eigenvectors. Note that
!                 even quite inaccurate eigenvectors are useful
!                 for pre-conditioning purposes.
!
!  LhessianEV     Switch (T/F) to compute approximated Hessian eigenvalues
!                 and eigenvectors.
!
!
!  LhotStart      Switch (T/F) to activate hot start in weak-constraint
!                 (W4DVAR and W4DPSAS) algorithms.
!
!  Lprecond       Switch (T/F) to activate preconditioning in the IS4DVAR
!                 algorithm. Two types of Limited-Memory preconditioner (LMP)
!                 are available Tshimanga et al., 2008): Spectral and Ritz.
!
!                   If Lprecond=T and Lritz=F,  Spectral LMP
!                   If Lprecond=T and Lritz=T,  Ritz LMP
!
!  Lritz          Switch to activate either Ritz Limited-Memory Preconditioner
!                 (T) or spectral Limited-Memory Preconditioner (F) to the
!                 IS4DVAR algorithm using eigenpairs approximation for the
!                 Hessian matrix.  The accuracy of the Hessian eigenvectors
!                 (HevecErr) can be used to fine tune the minimization. That
!                 is, HevecErr can be used to control number of eigenvalues
!                 of the preconditioning Hessian matrix. See Tshimanga et al.
!                 (2008) Q. J. R. Met. Soc. paper for details.
!
!  NritzEV        If preconditioning, specify number of eigenpairs to use.
!                   If zero, use HevecErr parameter to determine the number
!                   of converged eigenpairs.
!
!------------------------------------------------------------------------------
! Diffusive relaxation coefficients.
!------------------------------------------------------------------------------
!
! If weak constraint 4DVar and RPM_RELAXATION flag is activated, this 
! coefficients are use to relax the representer tangent lineas solution
! to previous outer loop linearized trajectory during the Picard
! iterations. The user may turn off relaxation on a particular variable
! by setting the coefficient to zero.
!
!  tl_M2diff      2D momentum diffusion relaxation coefficient (m2/s).
!
!  tl_M3diff      3D momentum diffusion relaxation coefficient (m2/s).
!
!  tl_Tdiff       Tracers type variables diffusion relaxation coefficients
!                 (m2/s).  NT values are expected.
!
!------------------------------------------------------------------------------
! Background/model correlation parameters.
!------------------------------------------------------------------------------
!
!  LdefNRM        Switch (T/F) to create a new normalization NetCDF file
!                 for, [4,1:Ngrids]:
!
!                      LdefNRM(1,:)   initial conditions error covariance
!                      LdefNRM(2,:)   model error covariance
!                      LdefNRM(3,:)   boundary conditions error covariance
!                      LdefNRM(4,:)   surface forcing error covariance
!
!                 The computation of the correlation normalization
!                 coefficients is very expensive and needs to be computed
!                 only once for a particular application provided that grid,
!                 land/sea masking (if any), and decorrelation scales (see
!                 below) remains the same.  The user can use this switch
!                 in conjunction with the CnormM, CnormI, CnormB, CnormF
!                 (see below) switches to compute each coefficient separately.
!                 The normalization NetCDF only needs to be created once
!                 and simultaneous runs can write to the same NetCDF.  If
!                 using this approach, compute the normalization factors
!                 with the CORRELATION CPP-option and not IS4DVAR, W4DPSAS
!                 or W4DVAR.
!            
!  LwrtNRM        Switch (T/F) to write out correlation normalization factors
!                 for, [4,1:Ngrids]:
!
!                      LwrtNRM(1,:)   initial conditions error covariance
!                      LwrtNRM(2,:)   model error covariance
!                      LwrtNRM(3,:)   boundary conditions error covariance
!                      LwrtNRM(4,:)   surface forcing error covariance
!
!                 If TRUE, these factors computed and written to NRMnameI,
!                 NRMnameM, NRMnameB, and NRMnameF NetCDF file, respectively.
!                 If FALSE, they are read from NRMname NetCDF file.
!
!  CnormM         Compute (T/F) model error covariance
!                   normalization factors:
!
!                   CnormM(isFsur)                free-surface
!                   CnormM(isUbar)                2D U-momentum
!                   CnormM(isVbar)                2D V-momentum
!                   CnormM(isUvel)                3D U-momentum
!                   CnormM(isVvel)                3D V-momentum
!                   CnormM(isTvar)                tracers (1:NT)
!
!  CnormI         Compute (T/F) initial conditions error covariance
!                   normalization factors:
!
!                   CnormI(isFsur)                free-surface
!                   CnormI(isUbar)                2D U-momentum
!                   CnormI(isVbar)                2D V-momentum
!                   CnormI(isUvel)                3D U-momentum
!                   CnormI(isVvel)                3D V-momentum
!                   CnormI(isTvar)                tracers (1:NT)
!
!  CnormB         Compute (T/F) open boundary conditions error covariance
!                   normalization factors:
!
!                   CnormB(isFsur)                free-surface
!                   CnormB(isUbar)                2D U-momentum
!                   CnormB(isVbar)                2D V-momentum
!                   CnormB(isUvel)                3D U-momentum
!                   CnormB(isVvel)                3D V-momentum
!                   CnormB(isTvar)                tracers (1:NT)
!
!  CnormF         Compute (T/F) surface forcing error covariance
!                   normalization factors:
!
!                   CnormF(isTsur)                tracer flux (1:NT)
!                   CnormF(isUstr)                wind U-stress
!                   CnormF(isVstr)                wind V-stress
!
!  Nmethod        Correlation normalization method:
!
!                   [0] Exact, very expensive
!                   [1] Approximated, randomization
!
!  Rscheme        Random number generation scheme if randomization:
!
!                   [1] Gaussian distributed deviates, numerical recipes
!
!  Nrandom        Number of iterations to compute correlation normalization
!                 factors using the randomization approach of Fisher and
!                 Courtier (1995). A large number is required to be
!                 statistically meaningful and achieve zero expectation
!                 mean and unit variance, approximately. These factors insure
!                 that the error covariance diagonal elements are equal to
!                 unity.
!
!  Hgamma         Horizontal stability and accuracy factor (< 1) used to
!                 scale the time-step of the convolution operator below its
!                 theoretical limit.
!
!  Vgamma         Vertical stability and accuracy factor (< 1) used to
!                 scale the time-step of the convolution operator below its
!                 theoretical limit.
!
!  HdecayM        Model error covariance, [1:Ngrids],
!                   horizontal, isotropic decorrelation scales (m):
!
!                   HdecayM(isFsur)               free-surface
!                   HdecayM(isUbar)               2D U-momentum
!                   HdecayM(isVbar)               2D V-momentum
!                   HdecayM(isUvel)               3D U-momentum
!                   HdecayM(isVvel)               3D V-momentum
!                   HdecayM(isTvar)               tracers (1:NT,1:Ngrids)
!
!  VdecayM        Model error covariance, [1:Ngrids],
!                   vertical, isotropic decorrelation scale (m):
!
!                   VdecayM(isUvel)               3D U-momentum
!                   VdecayM(isVvel)               3D V-momentum
!                   VdecayM(isTvar)               tracers (1:NT,1:Ngrids)
!
!  HdecayI        Initial conditions error covariance, [1:Ngrids],
!                   horizontal, isotropic decorrelation scales (m):
!
!                   HdecayI(isFsur)               free-surface
!                   HdecayI(isUbar)               2D U-momentum
!                   HdecayI(isVbar)               2D V-momentum
!                   HdecayI(isUvel)               3D U-momentum
!                   HdecayI(isVvel)               3D V-momentum
!                   HdecayI(isTvar)               tracers (1:NT,1:Ngrids)
!
!  VdecayI        Model error covariance, [1:Ngrids],
!                   vertical, isotropic decorrelation scale (m):
!
!                   VdecayI(isUvel)               3D U-momentum
!                   VdecayI(isVvel)               3D V-momentum
!                   VdecayI(isTvar)               tracers (1:NT)
!
!  HdecayB        Open boundary conditions error covariance, [4,1:Ngrids],
!                   horizontal, isotropic decorrelation scales (m):
!
!                   HdecayB(:,isFsur)             free-surface
!                   HdecayB(:,isUbar)             2D U-momentum
!                   HdecayB(:,isVbar)             2D V-momentum
!                   HdecayB(:,isUvel)             3D U-momentum
!                   HdecayB(:,isVvel)             3D V-momentum
!                   HdecayB(:,isTvar)             tracers (4,1:NT,1:Ngrids)
!
!                   boundary index   1: west  2: south  3: east  4: north
!
!  VdecayB        Model error covariance, [4,1:Ngrids],
!                   vertical, isotropic decorrelation scale (m):
!
!                   VdecayB(isUvel)               3D U-momentum
!                   VdecayB(isVvel)               3D V-momentum
!                   VdecayB(isTvar)               tracers (4,1:NT,1:Ngrids)
!
!                   boundary index   1: west  2: south  3: east  4: north
!
!  HdecayF        Surface forcing error covariance, [1:Ngrids],
!                   horizontal, isotropic decorrelation scales (m):
!
!                   HdecayF(isTsur)               tracers flux (1:NT,1:Ngrids)
!                   HdecayF(isUstr)               wind U-stress
!                   HdecayF(isVstr)               wind V-stress
!
!------------------------------------------------------------------------------
!  Input/Output NetCDF files (a string with a maximum of eighty characters).
!------------------------------------------------------------------------------
!
!  STDnameM       Input model error covariance
!                   standard deviation file name.
!
!  STDnameI       Input initial conditions error covariance
!                   standard deviation file name.
!
!  STDnameB       Input open boundary conditions error covariance
!                   standard deviation file name.
!
!  STDnameF       Input surface forcing error covariance
!                   standard deviation file name.
!
!  NRMnameM       Input/output model error covariance
!                   normalization factors file name.
!
!  NRMnameI       Input/output initial conditions error covariance
!                   normalization factors file name.
!
!  NRMnameB       Input/output open boundary conditions error covariance
!                   normalization factors file name.
!
!  NRMnameF       Input/output surface forcing error covariance
!                   normalization factors file name.
!
!  OBSname        Input/Output observations data file name.
!
!  HSSname        Input/Output Hessian eigenvectors file name.
!
!  LCZname        Input/output Lanczos vectors file name.
!
!  MODname        Output model data at observations locations file name.
!
